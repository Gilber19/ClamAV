const fs = require('fs');
const path = require('path');
const { randomUUID } = require('node:crypto');
const { files } = require('../utils/store');

class FileService {
  static uploadDir = path.resolve(process.cwd(), 'uploads');

  static async ensureUploadDir() {
    if (!fs.existsSync(this.uploadDir)) {
      fs.mkdirSync(this.uploadDir, { recursive: true });
    }
  }

  static async saveFile(file) {
    await this.ensureUploadDir();
    
    const fileId = path.basename(file.filename, path.extname(file.filename));
    
    files.set(fileId, {
      path: file.path,
      originalName: file.originalname,
      size: file.size,
      mimetype: file.mimetype,
      uploadedAt: new Date().toISOString()
    });

    return fileId;
  }

  static async getFile(fileId) {
    return files.get(fileId);
  }

  static async fileExists(fileId) {
    const meta = files.get(fileId);
    if (!meta) return false;
    
    return fs.existsSync(meta.path);
  }

  static async deleteFile(fileId) {
    const meta = files.get(fileId);
    if (!meta) return false;

    try {
      if (fs.existsSync(meta.path)) {
        fs.rmSync(meta.path, { force: true });
      }
      files.delete(fileId);
      return true;
    } catch (error) {
      console.error('[FileService] Delete error:', error);
      throw error;
    }
  }

  static async cleanupOldFiles(maxAgeMs = 24 * 60 * 60 * 1000) { // 24 horas por defecto
    const now = Date.now();
    const filesToDelete = [];

    for (const [fileId, meta] of files.entries()) {
      const uploadTime = new Date(meta.uploadedAt).getTime();
      if (now - uploadTime > maxAgeMs) {
        filesToDelete.push(fileId);
      }
    }

    for (const fileId of filesToDelete) {
      try {
        await this.deleteFile(fileId);
        console.log(`[FileService] Cleaned up old file: ${fileId}`);
      } catch (error) {
        console.error(`[FileService] Failed to cleanup file ${fileId}:`, error);
      }
    }

    return filesToDelete.length;
  }
}

module.exports = { FileService };
