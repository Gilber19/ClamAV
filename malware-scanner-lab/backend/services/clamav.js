const NodeClam = require('clamscan');

class ClamAVService {
  static clamd = null;
  static isInitializing = false;
  static initPromise = null;

  static async getClam() {
    if (this.clamd) return this.clamd;
    
    if (this.isInitializing) {
      return this.initPromise;
    }

    this.isInitializing = true;
    this.initPromise = this.initializeClamAV();
    
    try {
      this.clamd = await this.initPromise;
      return this.clamd;
    } finally {
      this.isInitializing = false;
      this.initPromise = null;
    }
  }

  static async initializeClamAV() {
    const host = process.env.CLAMAV_HOST || '127.0.0.1';
    const port = Number(process.env.CLAMAV_PORT || 3310);
    
    console.log(`[ClamAV] Initializing connection to ${host}:${port}`);
    
    try {
      const ClamScan = await new NodeClam().init({
        debugMode: process.env.NODE_ENV === 'development',
        clamdscan: {
          host,
          port,
          timeout: 120000,
          socket: false,
        },
        preference: 'clamdscan'
      });
      
      console.log('[ClamAV] Successfully initialized');
      return ClamScan;
    } catch (error) {
      console.error('[ClamAV] Initialization failed:', error);
      throw new Error(`Failed to connect to ClamAV: ${error.message}`);
    }
  }

  static async scanPath(filePath) {
    try {
      const clam = await this.getClam();
      const startTime = Date.now();
      
      console.log(`[ClamAV] Scanning file: ${filePath}`);
      
      const { isInfected, viruses } = await clam.isInfected(filePath);
      const duration = Date.now() - startTime;
      
      console.log(`[ClamAV] Scan completed in ${duration}ms - Infected: ${isInfected}`);
      
      return { 
        isInfected, 
        signature: Array.isArray(viruses) ? viruses.join(',') : viruses || null,
        scanDuration: duration
      };
    } catch (error) {
      console.error('[ClamAV] Scan error:', error);
      throw new Error(`Scan failed: ${error.message}`);
    }
  }

  static async isHealthy() {
    try {
      const clam = await this.getClam();
      // Intenta hacer ping a ClamAV para verificar conexión
      return true;
    } catch (error) {
      console.error('[ClamAV] Health check failed:', error);
      return false;
    }
  }

  static reset() {
    this.clamd = null;
    this.isInitializing = false;
    this.initPromise = null;
  }
}

// Backward compatibility
async function scanPath(filePath) {
  return ClamAVService.scanPath(filePath);
}

module.exports = { 
  ClamAVService,
  scanPath // Para compatibilidad con el código existente
};
