// server.js
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const { validateScanId, validateFileId } = require('./middleware/validation');

// Import routes
const uploadRoutes = require('./routes/upload');
const scanRoutes = require('./routes/scan');
const statusRoutes = require('./routes/status');
const resultRoutes = require('./routes/results');
const healthRoutes = require('./routes/health');

const app = express();

// Security middleware
app.use(helmet({
  crossOriginResourcePolicy: { policy: 'cross-origin' }
}));

// CORS configuration
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? process.env.ALLOWED_ORIGINS?.split(',') || []
    : true, // Allow all origins in development
  credentials: true
}));

// Body parsing
app.use(express.json({ limit: '1mb' }));
app.use(express.urlencoded({ extended: true, limit: '1mb' }));

// Logging
app.use(morgan(process.env.NODE_ENV === 'production' ? 'combined' : 'dev'));

// Rate limiting - more restrictive for scan operations
app.use('/api/upload', rateLimit({ 
  windowMs: 60 * 1000, 
  max: 10, // 10 uploads per minute
  message: { error: 'Demasiadas subidas. Límite: 10 por minuto.' }
}));

app.use('/api/scan', rateLimit({ 
  windowMs: 60 * 1000, 
  max: 20, // 20 scans per minute
  message: { error: 'Demasiados escaneos. Límite: 20 por minuto.' }
}));

app.use('/api', rateLimit({ 
  windowMs: 60 * 1000, 
  max: 100, // General limit
  message: { error: 'Demasiadas peticiones. Límite: 100 por minuto.' }
}));

// Routes with validation middleware
app.use('/api/upload', uploadRoutes);
app.use('/api/scan', scanRoutes);
app.use('/api/status', statusRoutes);
app.use('/api/result', resultRoutes);
app.use('/api/health', healthRoutes);

// Root health check
app.get('/api', (_req, res) => res.json({ 
  ok: true, 
  service: 'Malware Scanner API',
  version: '2.0.0',
  timestamp: new Date().toISOString()
}));

// 404 handler for API routes
app.use('/api', (_req, res) => res.status(404).json({ 
  error: 'Endpoint no encontrado',
  code: 'ENDPOINT_NOT_FOUND'
}));

// Global error handler
app.use((err, req, res, next) => {
  console.error('[Server Error]', {
    error: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    url: req.url,
    method: req.method,
    timestamp: new Date().toISOString()
  });

  // Multer errors
  if (err.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({ 
      error: 'Archivo demasiado grande',
      code: 'FILE_TOO_LARGE'
    });
  }

  if (err.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({ 
      error: 'Campo de archivo inesperado',
      code: 'UNEXPECTED_FILE_FIELD'
    });
  }

  // Generic error response
  res.status(err.status || 500).json({ 
    error: process.env.NODE_ENV === 'production' 
      ? 'Error interno del servidor'
      : err.message || 'Internal error',
    code: err.code || 'INTERNAL_ERROR',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// Graceful shutdown handling
process.on('SIGINT', () => {
  console.log('\n[Server] Shutting down gracefully...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n[Server] Shutting down gracefully...');
  process.exit(0);
});

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`[Server] API running on http://localhost:${PORT}`);
  console.log(`[Server] Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`[Server] ClamAV Host: ${process.env.CLAMAV_HOST || '127.0.0.1'}:${process.env.CLAMAV_PORT || 3310}`);
});
