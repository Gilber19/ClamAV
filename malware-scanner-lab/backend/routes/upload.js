const { Router } = require('express');
const multer = require('multer');
const path = require('path');
const { randomUUID } = require('node:crypto');
const { validateFile, validateFileId, MAX_BYTES, ALLOWED_EXT } = require('../middleware/validation');
const { UploadController } = require('../controllers/uploadController');
const { FileService } = require('../services/fileService');

const router = Router();

// Config de Multer: destino + nombre seguro (UUID + extensión original)
const storage = multer.diskStorage({
  destination: async (_req, _file, cb) => {
    await FileService.ensureUploadDir();
    cb(null, FileService.uploadDir);
  },
  filename: (_req, file, cb) => {
    const ext = path.extname(file.originalname || '').toLowerCase();
    cb(null, `${randomUUID()}${ext}`);
  },
});

const upload = multer({ 
  storage, 
  limits: { fileSize: MAX_BYTES },
  fileFilter: (req, file, cb) => {
    // Validación adicional en multer
    const ext = path.extname(file.originalname || '').toLowerCase();
    const isAllowed = ALLOWED_EXT.includes(ext);
    
    if (!isAllowed) {
      return cb(new Error('Tipo de archivo no permitido'), false);
    }
    cb(null, true);
  }
});

// POST /api/upload
router.post('/', upload.single('file'), validateFile, UploadController.uploadFile);

// DELETE /api/upload/:fileId (para limpieza manual)
router.delete('/:fileId', validateFileId, UploadController.deleteFile);

module.exports = router;
