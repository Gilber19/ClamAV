const { Router } = require('express');
const { ClamAVService } = require('../services/clamav');
const { FileService } = require('../services/fileService');
const { ScanService } = require('../services/scanService');

const router = Router();

// GET /api/health - Verificar estado del sistema
router.get('/', async (req, res) => {
  try {
    const clamAvHealthy = await ClamAVService.isHealthy();
    
    res.json({
      ok: true,
      timestamp: new Date().toISOString(),
      services: {
        clamav: clamAvHealthy ? 'healthy' : 'unhealthy',
        fileSystem: 'healthy' // Podríamos agregar más verificaciones
      }
    });
  } catch (error) {
    res.status(500).json({
      ok: false,
      error: 'Health check failed',
      timestamp: new Date().toISOString()
    });
  }
});

// GET /api/health/stats - Estadísticas del sistema
router.get('/stats', async (req, res) => {
  try {
    const allScans = await ScanService.getAllScans();
    const completedScans = allScans.filter(scan => scan.status === 'completed');
    const infectedFiles = completedScans.filter(scan => 
      scan.result && scan.result.status === 'infected'
    );

    res.json({
      totalScans: allScans.length,
      completedScans: completedScans.length,
      infectedFiles: infectedFiles.length,
      cleanFiles: completedScans.length - infectedFiles.length,
      uptime: process.uptime(),
      memoryUsage: process.memoryUsage(),
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: 'Failed to retrieve stats',
      timestamp: new Date().toISOString()
    });
  }
});

// POST /api/health/cleanup - Limpiar archivos y escaneos antiguos
router.post('/cleanup', async (req, res) => {
  try {
    const { fileMaxAge, scanMaxAge } = req.body;
    
    const cleanedFiles = await FileService.cleanupOldFiles(fileMaxAge);
    const cleanedScans = await ScanService.cleanupOldScans(scanMaxAge);
    
    res.json({
      ok: true,
      cleanedFiles,
      cleanedScans,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      error: 'Cleanup failed',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

module.exports = router;
